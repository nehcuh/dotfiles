# Git Privacy Configuration
# This file contains privacy-focused settings for Git

# Environment variables for Git privacy
export GIT_DISABLE_TELEMETRY="1"
export GIT_DISABLE_SEND_DATA="1"
export GIT_DISABLE_AUTO_UPDATE="1"
export GIT_DISABLE_USAGE_TRACKING="1"
export GIT_DISABLE_NETWORK_FEATURES="1"
export GIT_DISABLE_CREDENTIAL_HELPER="1"
export GIT_DISABLE_ASKPASS="1"
export GIT_DISABLE_GPG_UI="1"

# Git directories and files
export GIT_CONFIG_DIR="$HOME/.config/git"
export GIT_CREDENTIALS_DIR="$HOME/.config/git/credentials"
export GIT_TEMPLATES_DIR="$HOME/.config/git/templates"
export GIT_HOOKS_DIR="$HOME/.config/git/hooks"
export GIT_CACHE_DIR="$HOME/.cache/git"
export GIT_LOGS_DIR="$HOME/.local/state/git"

# Privacy-focused aliases
alias git='git --no-pager'
alias git-safe='git --no-pager --no-askpass --no-optional-locks'
alias git-private='git --no-pager --no-askpass --no-optional-locks --no-gpg-sign'
alias git-offline='git --no-pager --no-askpass --no-optional-locks --no-gpg-sign --no-verify'
alias git-no-network='git --no-pager --no-askpass --no-optional-locks --no-gpg-sign --no-verify --no-commit-id'

# Functions for Git privacy management
git_clean_cache() {
    echo "Cleaning Git cache..."
    rm -rf "$GIT_CACHE_DIR" 2>/dev/null || true
    rm -rf "$GIT_LOGS_DIR" 2>/dev/null || true
    rm -f "$HOME/.git-credentials" 2>/dev/null || true
    rm -f "$HOME/.git-credential-cache" 2>/dev/null || true
    rm -f "$HOME/.git-credential-store" 2>/dev/null || true
    echo "Cache cleaned successfully"
}

git_clean_history() {
    echo "Cleaning Git command history..."
    rm -f "$HOME/.git_history" 2>/dev/null || true
    rm -f "$HOME/.git_command_history" 2>/dev/null || true
    rm -f "$HOME/.git_recent_repos" 2>/dev/null || true
    echo "History cleaned successfully"
}

git_clean_temp() {
    echo "Cleaning Git temporary files..."
    find "$HOME" -name "*.git.*" -type f -delete 2>/dev/null || true
    find "$HOME" -name ".git*" -type f -delete 2>/dev/null || true
    echo "Temporary files cleaned successfully"
}

git_reset_credentials() {
    echo "Resetting Git credentials..."
    rm -rf "$GIT_CREDENTIALS_DIR" 2>/dev/null || true
    rm -f "$HOME/.git-credentials" 2>/dev/null || true
    rm -f "$HOME/.git-credential-cache" 2>/dev/null || true
    rm -f "$HOME/.git-credential-store" 2>/dev/null || true
    echo "Credentials reset successfully"
}

git_disable_gpg() {
    echo "Disabling GPG signing..."
    git config --global commit.gpgsign false
    git config --global tag.gpgsign false
    git config --global gpg.program true
    echo "GPG signing disabled"
}

git_disable_network() {
    echo "Disabling network operations..."
    git config --global --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/*
    git config --global --add remote.origin.push +refs/heads/*:refs/remotes/origin/*
    echo "Network operations disabled"
}

git_show_privacy_status() {
    echo "Git Privacy Status:"
    echo "  Telemetry: DISABLED"
    echo "  Auto Update: DISABLED"
    echo "  Usage Tracking: DISABLED"
    echo "  Network Features: DISABLED"
    echo "  Credential Helper: DISABLED"
    echo "  Askpass: DISABLED"
    echo "  GPG UI: DISABLED"
    echo "  Pager: DISABLED"
    echo "  Cache: MANAGED"
    echo "  History: MANAGED"
    echo "  Credentials: MANAGED"
}

git_privacy_audit() {
    echo "=== Git Privacy Audit ==="
    echo ""
    echo "Environment Variables:"
    env | grep -i git | grep -E "(DISABLE|TELEMETRY|USAGE|AUTO)" | sort
    echo ""
    echo "Git Configuration:"
    git config --global --list | grep -E "(telemetry|usage|auto|credential|gpg|sign)" | sort
    echo ""
    echo "Sensitive Files:"
    for file in "$HOME/.git-credentials" "$HOME/.git-credential-cache" "$HOME/.git-credential-store"; do
        if [ -f "$file" ]; then
            echo "  ✗ Found: $file"
        else
            echo "  ✓ Missing: $file"
        fi
    done
    echo ""
    echo "Cache Directories:"
    for dir in "$GIT_CACHE_DIR" "$GIT_LOGS_DIR" "$GIT_CREDENTIALS_DIR"; do
        if [ -d "$dir" ]; then
            echo "  ✗ Found: $dir"
        else
            echo "  ✓ Missing: $dir"
        fi
    done
    echo ""
}

git_setup_private_repo() {
    local repo_dir="$1"
    if [ -z "$repo_dir" ]; then
        echo "Usage: git_setup_private_repo <directory>"
        return 1
    fi
    
    echo "Setting up private repository in: $repo_dir"
    mkdir -p "$repo_dir"
    cd "$repo_dir"
    
    # Initialize with privacy settings
    git init
    git config user.name "Private User"
    git config user.email "private@localhost"
    git config commit.gpgsign false
    git config tag.gpgsign false
    git config credential.helper ""
    git config core.pager ""
    git config sendemail.smtpserver ""
    
    # Create .gitignore for sensitive files
    cat > .gitignore << 'EOF'
# Sensitive files
*.key
*.pem
*.p12
*.pfx
*.crt
*.cer
*.p7b
*.p7c
*.p7s
*.p8
*.p12
*.asc
*.gpg
*.pgp
*.sig
*.sign

# Private data
*.private
*.secret
*.sensitive
*.confidential
*.internal

# Cache and temporary files
*.cache
*.tmp
*.temp
*.log
*.backup
*.bak

# Configuration files with secrets
.env
.env.local
.env.*.local
config.json
secrets.json
settings.json
credentials.json

# System files
.DS_Store
Thumbs.db
*.swp
*.swo
*~
EOF
    
    echo "Private repository setup complete"
}

# Auto-cleanup on shell exit (optional)
# trap 'git_clean_cache; git_clean_history' EXIT