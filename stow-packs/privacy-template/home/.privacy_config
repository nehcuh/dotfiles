# Privacy Configuration Template
# This file contains privacy-focused settings template

# Environment variables for privacy (customize these)
export TELEMETRY_DISABLED="1"
export AUTO_UPDATE_DISABLED="1"
export DIAGNOSTICS_DISABLED="1"
export ONLINE_FEATURES_DISABLED="1"
export DATA_COLLECTION_DISABLED="1"
export CLOUD_SYNC_DISABLED="1"
export COLLABORATION_DISABLED="1"
export CRASH_REPORTING_DISABLED="1"
export USAGE_TRACKING_DISABLED="1"

# Generic directories (customize these)
export PRIVACY_CONFIG_DIR="$HOME/.config/privacy-template"
export PRIVACY_DATA_DIR="$HOME/.local/share/privacy-template"
export PRIVACY_CACHE_DIR="$HOME/.cache/privacy-template"
export PRIVACY_STATE_DIR="$HOME/.local/state/privacy-template"

# Privacy-focused aliases (customize these)
alias privacy-template='privacy-template --disable-telemetry'
alias privacy-template-safe='privacy-template --disable-telemetry --disable-auto-update'
alias privacy-template-private='privacy-template --disable-telemetry --disable-auto-update --disable-diagnostics'

# Functions for privacy management
privacy_template_clean_cache() {
    echo "Cleaning Privacy Template cache..."
    rm -rf "$PRIVACY_CACHE_DIR" 2>/dev/null || true
    rm -rf "$PRIVACY_STATE_DIR" 2>/dev/null || true
    echo "Cache cleaned successfully"
}

privacy_template_clean_data() {
    echo "Cleaning Privacy Template data..."
    rm -rf "$PRIVACY_DATA_DIR" 2>/dev/null || true
    echo "Data cleaned successfully"
}

privacy_template_reset_config() {
    echo "Resetting Privacy Template configuration..."
    rm -rf "$PRIVACY_CONFIG_DIR" 2>/dev/null || true
    echo "Configuration reset successfully"
}

privacy_template_clean_all() {
    echo "Cleaning all Privacy Template data..."
    privacy_template_clean_cache
    privacy_template_clean_data
    privacy_template_reset_config
    echo "All data cleaned successfully"
}

privacy_template_show_privacy_status() {
    echo "Privacy Template Status:"
    echo "  Telemetry: DISABLED"
    echo "  Auto Update: DISABLED"
    echo "  Diagnostics: DISABLED"
    echo "  Online Features: DISABLED"
    echo "  Data Collection: DISABLED"
    echo "  Cloud Sync: DISABLED"
    echo "  Collaboration: DISABLED"
    echo "  Crash Reporting: DISABLED"
    echo "  Usage Tracking: DISABLED"
    echo "  Cache: MANAGED"
    echo "  Data: MANAGED"
    echo "  State: MANAGED"
}

privacy_template_privacy_check() {
    echo "Checking Privacy Template settings..."
    
    # Check environment variables
    if [ "$TELEMETRY_DISABLED" = "1" ]; then
        echo "✓ Telemetry disabled"
    else
        echo "✗ Telemetry not disabled"
    fi
    
    if [ "$AUTO_UPDATE_DISABLED" = "1" ]; then
        echo "✓ Auto update disabled"
    else
        echo "✗ Auto update not disabled"
    fi
    
    # Check for sensitive files
    if [ -d "$PRIVACY_CACHE_DIR" ]; then
        echo "⚠ Cache directory exists - consider cleaning"
    fi
    
    if [ -d "$PRIVACY_DATA_DIR" ]; then
        echo "⚠ Data directory exists - consider cleaning"
    fi
}

privacy_template_safe_start() {
    echo "Starting Privacy Template in safe mode..."
    # Customize this command based on your software
    privacy-template --disable-telemetry --disable-auto-update --disable-diagnostics --disable-online-features
}

privacy_template_temp_session() {
    echo "Starting Privacy Template in temporary session..."
    # Customize this command based on your software
    privacy-template --disable-telemetry --disable-auto-update --disable-diagnostics --disable-online-features --temp-session
}

# Template for creating new privacy configurations
create_privacy_config() {
    local software_name="$1"
    if [ -z "$software_name" ]; then
        echo "Usage: create_privacy_config <software_name>"
        return 1
    fi
    
    echo "Creating privacy configuration for $software_name..."
    
    # Create config file
    local config_file="$HOME/.${software_name}_privacy_config"
    cat > "$config_file" << EOF
# ${software_name} Privacy Configuration
# This file contains privacy-focused settings for ${software_name}

# Environment variables for ${software_name} privacy
export ${software_name^^}_TELEMETRY_DISABLED="1"
export ${software_name^^}_AUTO_UPDATE_DISABLED="1"
export ${software_name^^}_DIAGNOSTICS_DISABLED="1"
export ${software_name^^}_ONLINE_FEATURES_DISABLED="1"

# ${software_name} directories and files
export ${software_name^^}_CONFIG_DIR="\$HOME/.config/${software_name}"
export ${software_name^^}_DATA_DIR="\$HOME/.local/share/${software_name}"
export ${software_name^^}_CACHE_DIR="\$HOME/.cache/${software_name}"

# Privacy-focused aliases
alias ${software_name}='${software_name} --disable-telemetry'
alias ${software_name}-safe='${software_name} --disable-telemetry --disable-auto-update'
alias ${software_name}-private='${software_name} --disable-telemetry --disable-auto-update --disable-diagnostics'

# Functions for ${software_name} privacy management
${software_name}_clean_cache() {
    echo "Cleaning ${software_name} cache..."
    rm -rf "\$${software_name^^}_CACHE_DIR" 2>/dev/null || true
    echo "Cache cleaned successfully"
}

${software_name}_show_privacy_status() {
    echo "${software_name} Privacy Status:"
    echo "  Telemetry: DISABLED"
    echo "  Auto Update: DISABLED"
    echo "  Diagnostics: DISABLED"
    echo "  Online Features: DISABLED"
    echo "  Cache: MANAGED"
}
EOF
    
    echo "Privacy configuration created at: $config_file"
    echo "Don't forget to:"
    echo "1. Source the config file: source $config_file"
    echo "2. Add it to your shell rc file"
    echo "3. Customize the aliases and functions"
}

# Template for creating gitignore patterns
create_privacy_gitignore() {
    local software_name="$1"
    if [ -z "$software_name" ]; then
        echo "Usage: create_privacy_gitignore <software_name>"
        return 1
    fi
    
    echo "Creating gitignore patterns for $software_name..."
    
    local gitignore_file="$HOME/.${software_name}_gitignore"
    cat > "$gitignore_file" << EOF
# ${software_name} privacy protection
.${software_name}/
.${software_name}-*/
.${software_name}-state/
.${software_name}-backup/
.${software_name}-temp/
.${software_name}-history/
.${software_name}-sessions/
.${software_name}-recent/
${software_name}.log
.config/${software_name}/
.cache/${software_name}/
.local/share/${software_name}/
.local/state/${software_name}/
EOF
    
    echo "Gitignore patterns created at: $gitignore_file"
    echo "Add these patterns to your main .gitignore file"
}

# Auto-cleanup on shell exit (optional)
# trap 'privacy_template_clean_cache' EXIT